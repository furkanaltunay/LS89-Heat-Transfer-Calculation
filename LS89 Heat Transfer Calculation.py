import numpy as np
import matplotlib.pyplot as plt
import scipy.interpolate as sc
from scipy.optimize import fsolve

# ---------------------------- COMMON PARAMETERS ----------------------------
L = 50e-3  # length (m)
T_wall = 297.75  # Wall temperature (K)
cp = 1005  # Specific heat capacity (J/kg.K)
k_air = 0.025  # Thermal conductivity of air (W/m.K)
gamma = 1.4  # Specific heat ratio for air
R = 287.05  # Specific gas constant for air (J/kg.K)
pt_tot = 10000  # Number of interpolation points

# Pressure and temperature values
Pt_inlet = 1.82e5  # Inlet total pressure (Pa)
P_LE = 1.82e5  # Leading edge pressure (Pa)
P_TE = 1.165e5  # Trailing edge pressure (Pa)
T_LE = 407.37  # Leading edge temperature (K)
T_TE = 358.60  # Trailing edge temperature (K)

# Sutherland's constants for air
SUTHERLAND_C1 = 1.458e-6  # kg/(m·s·K^1/2)
SUTHERLAND_C2 = 110.4  # K

# ---------------------------- HELPER FUNCTIONS ----------------------------

def calculate_arc_length(x, y):
    """Calculate cumulative arc length along the surface"""
    arc_lengths = np.sqrt(np.diff(x)**2 + np.diff(y)**2)
    arc_lengths_cumulative = np.concatenate(([0], np.cumsum(arc_lengths)))
    return arc_lengths_cumulative

def pressure_distribution(s, s_total, P_LE, P_TE):
    """Linear pressure distribution from LE to TE"""
    return P_LE + (P_TE - P_LE) * (s / s_total)

def temperature_distribution(s, s_total, T_LE, T_TE):
    """Linear temperature distribution from LE to TE"""
    return T_LE + (T_TE - T_LE) * (s / s_total)

def calculate_density(P, T, R):
    """Calculate density from ideal gas law"""
    return P / (R * T)

def calculate_viscosity(T):
    """Calculate dynamic viscosity using Sutherland's formula"""
    return SUTHERLAND_C1 * (T**1.5) / (T + SUTHERLAND_C2)

def calculate_velocity(M, T, gamma, R):
    """Calculate velocity from Mach number and temperature"""
    a = np.sqrt(gamma * R * T)  # Speed of sound
    V = M * a
    return V

def calculate_mach_from_pressure_ratio(P, Pt, gamma):
    """Calculate Mach number from pressure ratio using isentropic relations"""
    def equation(M):
        return (P/Pt) - (1 + (gamma-1)/2 * M**2)**(-gamma/(gamma-1))
    
    # Initial guess for Mach number
    M_guess = 0.5
    M = fsolve(equation, M_guess)[0]
    return M

def calculate_temperature_from_pressure_ratio(P, Pt, Tt, gamma):
    """Calculate static temperature from pressure ratio using isentropic relations"""
    return Tt * (P/Pt)**((gamma-1)/gamma)

def calculate_velocity_profile(s, s_total, P_LE, P_TE, T_LE, T_TE, gamma, R):
    """Calculate velocity, temperature, and density distributions along the surface"""
    M = []
    V = []
    P = []
    T = []
    rho = []
    mu = []
    
    for si in s:
        # Calculate local pressure and temperature
        Pi = pressure_distribution(si, s_total, P_LE, P_TE)
        
        # Calculate local temperature from isentropic relations
        Ti = calculate_temperature_from_pressure_ratio(Pi, P_LE, T_LE, gamma)
        
        # Calculate local Mach number
        Mi = calculate_mach_from_pressure_ratio(Pi, P_LE, gamma)
        
        # Calculate local velocity
        Vi = calculate_velocity(Mi, Ti, gamma, R)
        
        # Calculate local density and viscosity
        rho_i = calculate_density(Pi, Ti, R)
        mu_i = calculate_viscosity(Ti)
        
        M.append(Mi)
        V.append(Vi)
        P.append(Pi)
        T.append(Ti)
        rho.append(rho_i)
        mu.append(mu_i)
        
    return np.array(M), np.array(V), np.array(P), np.array(T), np.array(rho), np.array(mu)

def calculate_heat_transfer(s, L, rho, V, mu, T, Pr, k_air, T_wall):
    h = []
    q = []
    Re_values = []
    Nu_values = []
    flow_regime = []
    Re_crit = 5e5  # Critical Reynolds number for transition
    
    for i in range(1, len(s)):  # Skip first point (i=1 to end)
        # Calculate Prandtl number locally (could vary with temperature)
        Pr_local = (cp * mu[i]) / k_air
        
        Re = (rho[i] * V[i] * s[i]) / mu[i]
        
        # Calculate Nusselt number based on flow regime
        if Re < Re_crit and Re > 0:
            Nu = 0.332 * np.sqrt(Re) * Pr_local**(1/3)
            regime = 'laminar'
        elif Re >= Re_crit:
            Nu = 0.0296 * Re**0.8 * Pr_local**(1/3)
            regime = 'turbulent'
        else:
            Nu = 0
            regime = 'stagnation'
        
        h_val = (Nu * k_air) / s[i] if s[i] > 0 else 0
        h.append(h_val)
        
        # Calculate heat transfer for each segment using local temperature T[i] instead of T_infinity
        ds = s[i] - s[i-1]
        dA = L * ds
        q_val = h_val * dA * (T[i] - T_wall)
        q.append(q_val)
            
        Re_values.append(Re)
        Nu_values.append(Nu)
        flow_regime.append(regime)
        
    return h, q, s[1:], Re_values, Nu_values, V[1:], flow_regime, T[1:]

# ---------------------------- AIRFOIL COORDINATES ----------------------------
# Sample coordinates - REPLACE THESE WITH YOUR ACTUAL COORDINATES
# Pressure Side (PS) coordinates
x_vals_ps = np.array([-3.9934789683553906, -3.9890050831013206, -3.9777324058850003, -3.9568754797451495, -3.9292197616430498, -3.893618098705998, -3.8487601876738293, -3.795137179762419, -3.733077075800181, -3.6622518749587027, -3.586266186243552, -3.503153704737738,
                   
-3.4165190394468308, -3.3252150374981277, -3.225473939498596, -3.112871984398379, -2.99510954142449, -2.8743160658813824, -2.7508195585974704, -2.6234728667000513, -2.468029429688868, -2.275969726292619, -2.015674827612445, -1.7113912941486038, -1.1668506361001498,0, 0.853997457160793, 1.4521739008954826, 

1.8408929969001284, 2.134344880159313, 2.397733713387743, 2.659238666919657, 2.914435979705197, 3.1530046759970194, 3.3844465794981784, 3.613185451258533, 3.840531594538247, 4.067632162210024, 4.294159153445449, 4.522898025205803, 4.7510633205298065, 4.979802192290161, 5.207967487614164, 5.436706359374519, 5.664871654698522, 5.892791374414587, 6.1217758217828795, 6.350514693543234, 6.578679988867237, 6.80823801267188, 7.036403307995884, 7.265387755364176, 7.494945779168819, 7.723930226537112, 7.954307402386044, 8.183291849754337, 8.413669025603268, 8.64347262501585, 8.873849800864782, 9.104472552321653, 9.335668880214874, 9.566291631671744, 9.798307111609255, 10.029749015110413, 10.262583647092212, 10.494025550593372, 10.727679334619461, 10.960759542209198, 11.194413326235287, 11.428312685869312, 11.66278562193969, 11.897504133618005, 12.132796221732672, 12.368333885455275, 12.60444512561423, 12.840801941381123, 13.078551485628658, 13.31572745343984, 13.55372257329531, 13.792291269587132, 14.031924693531181, 14.271312541867292, 14.511765117855632, 14.751972118236031, 14.994062998312947, 15.237546606870504, 15.482094943080288, 15.72803600777071, 15.975041800113361, 16.221802016848073, 16.46962696123501, 16.7180254820583, 16.96585042644524, 17.21506809931282, 17.4642857721804, 17.714568172700204, 17.964031421175722, 18.21488739813188, 18.465988950695973, 18.71848323174071, 18.970403936349093, 19.223717369438116, 19.47645722609079, 19.73001623478775, 19.984967971965357, 20.239346132706604, 20.495936173972783, 20.753590942891194, 21.01263844029024, 21.271112361252936, 
21.53261731478485, 21.793548691880414, 22.056691949500905, 22.320080782729335, 22.584862344438406, 22.85152778584399, 23.11958595573022, 23.38788970122438, 23.658405327243475, 23.930559257351145, 24.20295876306675, 24.47617742082665, 24.752427111155768, 25.02974152913711, 25.30844867559909, 25.588220549713302, 25.87102345639673, 26.154071938688098, 26.439332301504393, 26.726476544017203, 27.014439938574302, 27.30543436570062, 27.597493520479166, 27.890945403738346, 28.187100318738338, 28.485467114263255, 28.784898637440403, 29.087361193186766, 29.390888476585356, 29.696627640508876, 30.0050698361732, 30.315723912362454, 30.628261868248224, 30.943011704658925, 31.261038149246776, 31.579310169442568, 31.90143237425187, 32.22625761080197, 32.551901999396364, 32.88139657260427, 33.21359417755297, 33.54882281507089, 33.88511618024104, 34.2252597300247, 34.56728715950487, 34.9125911971622, 35.260926267388754, 35.6119643693561, 35.96685265593696, 36.32444397425863, 36.68424717310522, 37.04593425164833, 37.41065236276066, 37.778892657658076, 38.15098313716901, 38.526595800465024, 38.907696952463134, 39.29232028824633, 39.68079380864304, 40.070905633128326, 40.465358793442995, 40.86202383428259, 41.26221105890728, 41.66567489170913, 42.07462721321306, 42.4862825664578, 42.902607256360334, 43.32163497800368, 43.7453320363048, 44.17255127839103, 44.605259009179356, 45.040669771708465, 45.481814598547615, 45.92680961000026, 46.375326805238, 46.828513337133536, 47.28604120485846, 47.748238409241175, 48.214776949453274, 48.686803978367465, 49.16153403902245, 49.641752588379525, 50.12795077765456, 50.62127575972026, 51.119515654051696, 51.62045858012393, 52.1236133867211, 52.62865207301478, 53.13590263983339, 53.64503708634852, 54.158267293085096, 54.67780514056804, 55.19676941161463, 55.71794556318616, 56.236909834232755, 56.75808598580428, 57.277869408895164, 57.796833679941756, 58.31800983151328, 58.83697410255988, 59.3581502541314, 59.877114525177994, 60.39829067674952, 60.91725494779612, 61.43925025141193, 61.958214522458526, 62.47775236994148, 62.85220938009736, 62.98770596850089, 63.152454955158326, 63.36947672258372, 63.54325168220972, 63.68016479984272, 63.75891812233121, 63.80654366713671

                       
                       ])


y_vals_ps= np.array([   8.456995845411251, 8.228019898310396, 7.993062611238093, 7.752615135410218, 7.506186319610894, 7.255414467928699, 6.9969405469660035, 6.733550013684086, 6.463030987558017, 6.187595349112728, 5.907325523568693, 5.623286238578137, 

5.335559919361538, 5.0457848700074726, 4.748881327809256, 4.4441932911100634, 4.134671067312125, 3.8242472662494214, 3.510710007397025, 3.195697594843513, 2.859790854973426, 2.499465903948182, 2.0901413802251607, 1.6512364574198233, 1.042880910282989,0, -0.3721321581950416, -0.5639157397679166, -0.6102564821155642, -0.5886696293658501, -0.5472531769517874, -0.5032968431843828, -0.4561446264068097, 

-0.3961281524215757, -0.33234221898982214, -0.2654428277683755, -0.1987890121548668, -0.13074246806071826, -0.06351507601085832, 0.00338431521058826, 0.06946455438774599, 0.1363639456091921, 0.20244418478634982, 0.2693435760077966, 0.3354238151849539, 0.40289678284275193, 0.46840344558355845, 0.5353028368050057, 0.601383075982163, 0.6677088907672581, 0.7337891299444154, 0.7992957926852223, 
0.8656216074703185, 0.9311282702111244, 0.9968805085598689, 1.0623871713006758, 1.1281394096494202, 1.1930724959538754, 1.2588247343026209, 1.3231842441707249, 1.388362906083118, 1.4527224159512222, 1.5173275014272654, 1.5811134348590183, 1.6451449438987102, 1.7089308773304637, 1.7723888099338045, 1.8350275904928555, 1.898485523096196, 1.9605507272188956, 2.023435083385884, 2.084926711072234, 2.147237490802872, 2.208155542052871, 2.2698927453471582, 2.3302372201608037, 2.3908272705823905, 2.450598168959685, 2.5097954909006313, 2.569811964885866, 2.6278621339541086, 2.687305031502993, 2.7447816241348817, 2.8036509452474143, 2.8599803850066046, 2.916555400373733, 2.971164110823869, 3.0260183968819443, 3.0789063780230275, 3.133187087644752, 3.185501492349484, 3.238635049098506, 3.2909494538032384, 3.343509434115908, 3.3960694144285783, 3.4466630898242574, 3.49783034165629, 3.549243169096257, 3.5992632680555854, 3.649528942622852, 3.6989754651458293, 3.748667563276745, 3.7975405093633707, 3.8458398790136457, 3.894384824271859, 3.9421106174857834, 3.989508409871293, 4.0349398973398145, 4.080616960416271, 4.125474871448442, 4.1694312052158455, 4.212568386938963, 4.255377567833664, 4.2967940202477255, 4.338456048269726, 4.377578194938388, 4.416945917214982, 4.454920911010938, 4.4925679039784825, 4.529067744073323, 4.564174855687524, 4.598708390865376, 4.632340348778461, 4.664006001774554, 4.695917230378588, 4.725862154065627, 4.754905500487909, 4.782556118429544, 4.809878735542769, 4.834661471302649, 4.858870630626185, 4.88217821268495, 4.903519489826726, 4.925106342576441, 4.94357973753646, 4.961725131668066, 4.977904220882686, 4.9931817328325385, 5.0064929398653994, 5.019476146069846, 5.0293458944846, 5.038887642070942, 5.0458895083039454, 5.052563373708529, 5.056942933367712, 5.059929764546254, 5.061441442023684, 5.059839661711417, 5.0576643049628, 5.054013794513068, 5.047249826273642, 5.0395842807694535, 5.029952430348273, 5.018845426225979, 5.0051985407503405, 4.989257349529299, 4.9724145810434885, 4.952458354767993, 4.931026974791379, 4.906482137025072, 4.881609298430347, 4.854196578482287, 4.825882281269462, 4.79388094983059, 4.760404464690604, 4.7232409453245685, 4.683455119384723, 4.639982259218834, 4.595034245351827, 4.548939078612114, 4.498583301210009, 4.447899522979492, 4.393528710522929, 4.336863592320962, 4.27757616754518, 4.215175284979704, 4.150725672276762, 4.083162601784123, 4.013550801154024, 3.940251966297876, 3.864330824867911, 3.785296225648257, 3.702246591374139, 3.617721803398912, 3.5295099811976383, 3.439249428858898, 3.3447282658577575, 3.248158372719158, 3.1473278689181656, 3.0438750585433496, 2.937308790378841, 2.8281202156405154, 2.7135238773670975, 2.595158079647156, 2.473350823309105, 2.348430109181364, 2.2231813942252137, 2.0953927979157165, 1.9672762007778057, 1.8366197222865557, 1.7030953616135527, 1.5663751179303798, 1.4288357222029093, 1.2909683256470295, 1.1534289299195704, 1.015561533363694, 0.877448561199885, 0.7399091654724146, 0.6020417689165347, 0.4645023731890755, 0.3266349766331992, 0.18909558090573642, 0.05122818434986009, -0.08631121137761032, -0.22475218436983635, -0.36229158009729556, -0.49901182378047604, -0.5988464247218162, -0.6302418787080721, -0.619860578435591, -0.5679514996192888, -0.4540205406705391, -0.314278642085999, -0.13381281652053523, 0.06844891362627349
                      
                      ])
# SS coordinates (your values)
x_vals_ss = np.array([-3.9930379413437267, -3.985470121541401, -3.9727418138654027, -3.9545250174873186, -3.9336051893684307, -3.9088351766360354, -3.8821812842071237, -3.8508580551204163, -3.818470098381482, -3.7830511090733294, -3.7457482400686613, -3.702956882361909, -3.6574624929143504, -3.607298766808996, -3.553612856918548, -3.4944384583260146, -3.431741875948388, -3.3635568048686766, -3.2910303979595814, -3.2154729584812682, -3.137212487262151, -3.0542826793852367, -2.969468991811807, -2.8799859675805815, -2.7886190636528396, -2.6934019751115916, -2.5963010068738273, -2.496742582503194, -2.3941531255633457, -2.28967978892698, -2.181356267677107, -2.0719680187750087, -1.9579104332151127, -1.8411498159144122, -1.7205390140002048, -1.5964060283009032, -1.4692420100323842, -1.3385558079787705, -1.2048385733559388, -1.0667800029037255, -0.9248712478380038, -0.7786211569428995, -0.6277017293900002, -0.4718673895713655, -0.3125108659676378, -0.1490585821424645, 0.016605582207638536, 0.18661108238712212, 0.36128591922440345, 0.5394829398467768, 0.7239876012155264, 0.914471902502236, 1.1106902680989696, 1.3107588183092096, 
1.5143495523045414, 1.7226096229576708, 1.9335727253516073, 2.150843468491915, 2.3724555474616063, 2.599556115133382, 2.830998018634541, 3.0679284108377867, 3.306742682737545, 3.549407139250814, 3.797232083637753, 4.050545516726778, 4.3106577417780505, 4.577896759619986, 4.8508698417719485, 5.128184259753289, 5.409594437956079, 5.695673952816662, 5.984456499418051, 6.28118499085439, 6.583073970164404, 6.891270590220791, 7.2046276981508495, 7.521834990694415, 7.842564467023072, 8.168208855617467, 8.498522580869656, 8.833996793995517, 9.176597799912042, 9.525178445746526, 9.879247580283096, 10.238477202693339, 10.603195313805665, 10.971435608703088, 11.345164392302593, 11.72405366377577, 12.108431423951032, 12.497969671999968, 12.893815560795277, 13.29293805776774, 13.69640189056959, 14.104535060029232, 14.519467021451128, 14.941771351271619, 15.373659930015643, 15.81152814867763, 16.25570400808599, 16.702582899235153, 17.151673670909247, 17.602648322279855, 18.059357037960485, 18.522373394387493, 18.99300769482104, 19.47486454826669, 19.96597764980746, 20.463398392094604, 20.96352216612255, 21.469953580896878, 21.98072633150058, 22.500264178983524, 23.027419970473012, 23.563340858841737, 24.107698843261293, 24.6600027725158, 25.219679070168908, 25.786154159784264, 26.35975604219028, 26.94179502064713, 27.532025519546867, 28.12774450714869, 28.72944313466847, 29.33663025089034, 29.949797007030174, 30.5676330998278, 31.190629680499097, 31.81911474987248, 32.45357945916382, 33.0929590807209, 33.73700803893577, 34.385398332980024, 35.036819659593505, 35.69340147408065, 36.35711008135846, 37.0284366326428, 37.70934743285068, 38.39705702502081, 39.09107425793731, 39.79025197872748, 40.494099036175456, 41.20040354975629, 41.90941109507793, 42.62226882501308, 43.337010434644746, 44.054783076845624, 44.776897054875896, 45.50228764108331, 46.23562417212569, 46.97821695126318, 47.71401093843842, 48.44841219713302, 49.18420618430826, 49.91860744300286, 50.652189549653166, 51.38798353682841, 52.12156564347872, 52.85817878269825, 53.59176088934856, 54.32837402856809, 55.0619561352184, 55.79856927443793, 56.53215138108825, 57.26630706417491, 58.00234662695809, 58.73568315800046, 59.472296297219984, 60.20424009978172, 60.94249154308983, 61.67607364974014, 62.41268678895967, 63.5065428450306, 63.51227860939411, 63.61139430669959, 63.72532526564834, 63.78281545870813
                      
                      ])



y_vals_ss = np.array([8.682530333893999, 8.90429536293023, 9.121226204867712, 9.335534740231376, 9.54672981780535, 9.756449741678207, 9.963629784197721, 10.16876109657977, 10.371926104044828, 10.57418953424512, 10.77391308309207, 10.971014325365207, 11.165002109848647, 11.356941164194621, 11.545193184314552, 11.730822897860666, 11.912765577180735, 12.092085949926986, 12.267145712010842, 12.441303896829934, 12.612348623859333, 12.781344620751266, 12.947800736289857, 13.112208121690982, 13.274075625738762, 13.434467976085433, 13.592320445078755, 13.748452184763027, 13.903682347182535, 14.0563726282487, 14.207587755613751, 14.35683657806181, 14.504036670372402, 14.648123304893303, 14.790734785713088, 14.929659232306829, 15.067682101635805, 15.202017936738738, 15.335452194576906, 15.464625841752678, 15.592324335227335, 15.715762218039597, 15.837151370714393, 15.955099064771083, 16.06935972460173, 16.18075250225062, 16.291817279071097, 16.39862144522918, 16.503376881249793, 16.604445283044367, 16.70231780182877, 16.794782557078076, 16.88323227727292, 16.970206843766658, 17.053494376034344, 17.134733178164566, 17.212858522505098, 17.287787983835457, 17.358456834503425, 17.426503378597573, 17.490289312029326, 17.551452938887262, 17.610076684391856, 17.667225276195335, 17.71953968090007, 17.769231779030985, 17.81294253719045, 17.8528838359034, 17.888810099561887, 17.920475752557984, 17.949273523372323, 17.976022564049195, 17.999658146936376, 18.018950693940685, 18.033409053846245, 18.044671530741645, 18.051099820538294, 18.056052956633827, 18.057319058503314, 18.0551437017547, 18.050919614868615, 18.041861340883788, 18.029033607452437, 18.010798110485993, 17.989940306945726, 17.96424831630672, 17.935934019093892, 17.903932687655022, 17.86930904964233, 17.829851224530895, 17.78777109284564, 17.740856774061648, 17.69074657226748, 17.638342064727908, 17.581676946525942, 17.52296309818651, 17.45826790987563, 17.388410533637586, 17.313062968643976, 17.232307640115266, 17.14835642857639, 17.061291759247815, 16.973899089090832, 16.883966537580505, 16.790018951015718, 16.692875481440765, 16.589177095458016, 16.47884136784699, 16.36080357095546, 16.239569891053762, 16.115222753362374, 15.987679732660817, 15.855876101296865, 15.719155857613691, 15.575880697522711, 15.427688925112516, 15.272368659858174, 15.112705358720957, 14.947879869656578, 14.777073040620754, 14.60249675213841, 14.420791970811916, 14.233351425121912, 14.04328857285809, 13.84781795705917, 13.649725034686433, 13.4462243487786, 13.2406749327333, 13.030291329589254, 12.81728541987139, 12.598871746618428, 12.37701661474736, 12.153112752738828, 11.924948280067898, 11.695882230132206, 11.461981993097762, 11.224312296616803, 10.98008768372805, 10.730372882083719, 10.474676740467936, 10.21578471584199, 9.952058504117298, 9.68628356225514, 9.418787891083923, 9.148178762123017, 8.876094479460996, 8.601470315445631, 8.325944574165502, 8.04615822222298, 7.764077564535056, 7.477653870964259, 7.183528108112955, 6.895383685233101, 6.606993686745318, 6.3188492638654665, 6.030459265377679, 5.742642843326239, 5.454498420446384, 5.166681998394951, 4.877963999078751, 4.5901475770273095, 4.30142957771111, 4.013613155659669, 3.7248951563434685, 3.437078734292031, 3.15008146428488, 2.860544312924393, 2.5741206193535957, 2.2854026200373956, 1.9987333508586542, 1.708868198669747, 1.4210517766183133, 1.132333777302113, 0.6703803937265073, 0.6785719141693961, 0.5969626098735733, 0.4231876502475711, 0.2803875182380057
                      ])

# ---------------------------- PRESSURE SIDE (PS) ----------------------------

# PS interpolation
x_ps = np.linspace(x_vals_ps[0], x_vals_ps[-1], pt_tot)
interp_func_ps = sc.interp1d(x_vals_ps, y_vals_ps, kind='linear')
y_ps = interp_func_ps(x_ps)
x_ps = x_ps / 1000  # mm -> m
y_ps = y_ps / 1000

# Calculate arc length
s_ps = calculate_arc_length(x_ps, y_ps)

# ---------------------------- SUCTION SIDE (SS) ----------------------------

# SS interpolation
x_ss = np.linspace(x_vals_ss[0], x_vals_ss[-1], pt_tot)
interp_func_ss = sc.interp1d(x_vals_ss, y_vals_ss, kind='linear')
y_ss = interp_func_ss(x_ss)
x_ss = x_ss / 1000  # mm -> m
y_ss = y_ss / 1000

# Calculate arc length
s_ss = calculate_arc_length(x_ss, y_ss)

# ---------------------------- VELOCITY AND HEAT TRANSFER ----------------------------
# PS and SS velocity and heat transfer calculations
M_ps, V_ps, P_ps, T_ps, rho_ps, mu_ps = calculate_velocity_profile(s_ps, s_ps[-1], P_LE, P_TE, T_LE, T_TE, gamma, R)
M_ss, V_ss, P_ss, T_ss, rho_ss, mu_ss = calculate_velocity_profile(s_ss, s_ss[-1], P_LE, P_TE, T_LE, T_TE, gamma, R)

# Calculate Prandtl numbers
Pr_ps = (cp * mu_ps) / k_air
Pr_ss = (cp * mu_ss) / k_air

h_ps, q_ps, s_ps_q, Re_ps, Nu_ps, V_ps_q, regime_ps, T_ps_q = calculate_heat_transfer(
    s_ps, L, rho_ps, V_ps, mu_ps, T_ps, Pr_ps, k_air, T_wall)

h_ss, q_ss, s_ss_q, Re_ss, Nu_ss, V_ss_q, regime_ss, T_ss_q = calculate_heat_transfer(
    s_ss, L, rho_ss, V_ss, mu_ss, T_ss, Pr_ss, k_air, T_wall)

# ---------------------------- PLOTTING ----------------------------
fig, axs = plt.subplots(3, 3, figsize=(30, 20))
plt.subplots_adjust(hspace=3, wspace=3)  # Subplot'lar arasında daha fazla boşluk bırak

# 1. Airfoil Profile (x vs y)
axs[0,0].plot(x_ps, y_ps, label="Pressure Side (PS)", color="red")
axs[0,0].plot(x_ss, y_ss, label="Suction Side (SS)", color="blue")
axs[0,0].set(xlabel="x [m]", ylabel="y [m]", title="LS89 Airfoil Profile")
axs[0,0].set_ylim(-0.007, 0.027)
axs[0,0].grid(True)
axs[0,0].legend()

# 2. Velocity Distribution vs Arc Length
axs[0,1].plot(-s_ps_q, V_ps_q, label="PS - Velocity", color="red")
axs[0,1].plot(s_ss_q, V_ss_q, label="SS - Velocity", color="blue")
axs[0,1].set(xlabel="Arc Length [m]", ylabel="Velocity [m/s]", title="Velocity Distribution")
axs[0,1].grid(True)
axs[0,1].legend()

# 3. Temperature Distribution vs Arc Length
axs[1,0].plot(-s_ps_q, T_ps_q, label="PS - Temperature", color="red")
axs[1,0].plot(s_ss_q, T_ss_q, label="SS - Temperature", color="blue")
axs[1,0].set(xlabel="Arc Length [m]", ylabel="Temperature [K]", title="Temperature Distribution")
axs[1,0].grid(True)
axs[1,0].legend()

# 4. Heat Transfer Coefficient Distribution
axs[1,1].plot(-s_ps_q, h_ps, label="PS - HTC", color="red")
axs[1,1].plot(s_ss_q, h_ss, label="SS - HTC", color="blue")
axs[1,1].set(
    xlabel="Arc Length [m]", 
    ylabel="Heat Transfer Coefficient [W/m²·K]", 
    title="Heat Transfer Coefficient Distribution"
)
axs[1,1].grid(True)
axs[1,1].legend()

# 5. Reynolds Number vs Arc Length
axs[2,0].plot(-s_ps_q, Re_ps, label="PS - Re", color="red")
axs[2,0].plot(s_ss_q, Re_ss, label="SS - Re", color="blue")
axs[2,0].set(xlabel="Arc Length [m]", ylabel="Reynolds Number", title="Reynolds Number Distribution")
axs[2,0].grid(True)
axs[2,0].legend()

# 6. Heat Flux Distribution
axs[2,1].plot(-s_ps_q, q_ps, label="PS - Heat Flux", color="red")
axs[2,1].plot(s_ss_q, q_ss, label="SS - Heat Flux", color="blue")
axs[2,1].set(xlabel="Arc Length [m]", ylabel="Heat Flux [W/m²]", title="Heat Flux Distribution")
axs[2,1].grid(True)
axs[2,1].legend()

# 7. Nusselt Number Distribution
axs[0,2].plot(-s_ps_q, Nu_ps, label="PS - Nu", color="red")
axs[0,2].plot(s_ss_q, Nu_ss, label="SS - Nu", color="blue")
axs[0,2].set(xlabel="Arc Length [m]", ylabel="Nusselt Number", title="Nusselt Number Distribution")
axs[0,2].grid(True)
axs[0,2].legend()

# 8. Density Distribution
axs[1,2].plot(-s_ps_q, rho_ps[1:], label="PS - Density", color="red")
axs[1,2].plot(s_ss_q, rho_ss[1:], label="SS - Density", color="blue")
axs[1,2].set(xlabel="Arc Length [m]", ylabel="Density [kg/m³]", title="Density Distribution")
axs[1,2].grid(True)
axs[1,2].legend()

# 9. Viscosity Distribution
axs[2,2].plot(-s_ps_q, mu_ps[1:], label="PS - Viscosity", color="red")
axs[2,2].plot(s_ss_q, mu_ss[1:], label="SS - Viscosity", color="blue")
axs[2,2].set(xlabel="Arc Length [m]", ylabel="Viscosity [kg/m·s]", title="Viscosity Distribution")
axs[2,2].grid(True)
axs[2,2].legend()


# Total heat transfer
total_q_ps = sum(q_ps)
total_q_ss = sum(q_ss)
print(f"Total Heat Transfer - Pressure Side: {total_q_ps:.2f} W")
print(f"Total Heat Transfer - Suction Side: {total_q_ss:.2f} W")
print(f"Total Heat Transfer: {total_q_ps + total_q_ss:.2f} W")

plt.tight_layout()
plt.savefig('airfoil_analysis_highquality.png', dpi=1000, bbox_inches='tight', format='png', facecolor='white')
plt.show()
